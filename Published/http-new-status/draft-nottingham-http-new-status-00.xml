<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE rfc SYSTEM "xml2rfc/rfc2629.dtd" [
   <!ENTITY rfc2119 SYSTEM 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
   <!ENTITY rfc2616 SYSTEM 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml'>
   <!ENTITY rfc4791 SYSTEM 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4791.xml'>
   <!ENTITY rfc4918 SYSTEM 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4918.xml'>
]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes" ?>
<?rfc tocdepth="3" ?>
<?rfc tocindent="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>
<?rfc compact="yes" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes" ?>

<rfc ipr="trust200902" 
     docName="draft-nottingham-http-new-status-00" 
     category="std"
     updates="2616">

	<front>
		<title>Additional HTTP Status Codes</title>
		<author initials="M." surname="Nottingham" fullname="Mark Nottingham">
			<organization></organization>
			<address>
				<email>mnot@mnot.net</email>
				<uri>http://www.mnot.net/</uri>
			</address>
		</author>

		<author initials="R." surname="Fielding" fullname="Roy T. Fielding">
		  <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
		  <address>
		    <postal>
		      <street>345 Park Ave</street>
		      <city>San Jose</city>
		      <region>CA</region>
		      <code>95110</code>
		      <country>USA</country>
		    </postal>
		    <email>fielding@gbiv.com</email>
		    <uri>http://roy.gbiv.com/</uri>
		  </address>
		</author>

		<date year="2011"/>
		<abstract>

			<t>This document specifies additional HyperText Transfer Protocol (HTTP) 
				status codes for a variety of common situations.</t>

		</abstract>
	</front>

	<middle>

		<section title="Introduction">
			<t>This document specifies additional HTTP <xref target="RFC2616"/> 
			status codes for a variety of common situations, to improve 
			interoperability and avoid confusion when other, less precise status 
			codes are used.</t>
			
			<t>Feedback should occur on the ietf-http-wg@w3.org mailing list,
      although this draft is NOT a work item of the IETF HTTPbis Working
      Group. </t>
		</section>

		<section title="Requirements">
		   <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
		   NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in
		   this document are to be interpreted as described in <xref
		   target="RFC2119"/>.</t>
		</section>


		<section title="428 Network Authentication Required" anchor="status-code">
			<t>This status code indicates that the client needs to authenticate to
			gain network access.</t>

			<t>The response representation SHOULD indicate how to do this;
			e.g., with an HTML form for submitting credentials.</t>

      <t>The 428 status SHOULD NOT be generated by origin servers; it is 
        intended for use by intermediaries.</t>

			<t>Responses with the 428 status code MUST NOT be stored by a
			cache.</t>

      <section title="The 428 Status Code and Captive Portals" anchor="use428">
				<t>This section demonstrates a typical use of the 428 status code;
				it is not normative. See <xref target="issues"/> for an explanation
				of the issues that motivate this status code.</t>

				<t>A network operator wishing to require some authentication,
				acceptance of terms or other user interaction before granting access
				usually does so by identify clients who have not done so ("unknown
				clients") using their MAC addresses.</t>

				<t>Unknown clients then have all traffic blocked, except for that on
				TCP port 80, which is sent to a HTTP server (the "login server")
				dedicated to "logging in" unknown clients, and of course traffic to
				the login server itself.</t>

				<t>For example, a user agent might connect to a network and make the
				following HTTP request on TCP port 80:</t>

				<figure><artwork xml:space="preserve"><![CDATA[
GET /index.htm HTTP/1.1
Host: www.example.com
]]></artwork></figure>

				<t>Upon receiving such a request, the login server would generate a
				428 response:</t>

				<figure><artwork xml:space="preserve"><![CDATA[
HTTP/1.1 428 Network Authentication Required
Refresh: 0; url=https://login.example.net/
Content-Type: text/html

<html>
   <head>
      <title>Network Authentication Required</title>
   </head>
   <body>
      <h1>You are being redirected to log into the network...</h1>
   </body>
</html>
]]></artwork></figure>

				<t>Here, the 428 status code assures that non-browser clients will
				not interpret the response as being from the origin server, and the
				Refresh header redirects the user agent to the login server (an HTML
				META element can be used for this as well).</t>

				<t>Note that the 428 response can itself contain the login
				interface, but it may not be desirable to do so, because browsers
				would show the login interface as being associated with the
				originally requested URL, which may cause confusion.</t>
      </section>
 		</section>

		<section title="429 Limit Exceeded">
			<t>This status code indicates that the client has exceeded some
				usage limit on the origin server, such as sending too many requests
				in a given amount of time ("rate limiting").</t>

			<t>The response representations SHOULD include details explaining
				the limit, and MAY include a Retry-After header indicating how
				long to wait before making a new request.</t>

			<t>For example:</t>

				<figure><artwork xml:space="preserve"><![CDATA[
HTTP/1.1 429 Limit Exceeded
Content-Type: text/html
Retry-After: 3600

<html>
   <head>
      <title>Limit Exceeded</title>
   </head>
   <body>
      <h1>Limit Exceeded</h1>
      <p>I only allow 50 requests per hour to this Web site.
      Try again soon.</p>
   </body>
</html>
]]></artwork></figure>

			<t>Note that this specification does not define specific limits, nor
				their scope. For example, an origin server that is limiting request
				rates can do so based upon counts of requests on a per-resource basis,
				across the entire server, or even among a set of servers.</t>

			<t>Responses with the 429 status code MUST NOT be stored by a
			cache.</t>
		</section>

		<section title="430 Request Header Fields Too Large">
			<t>This status code indicates that the server is unwilling to process
				the request because its header fields are too large. The request MAY
				be resubmitted after reducing the size of the request header fields.
				</t>

			<t>It can be used both when the set of request header fields in total 
				are too large, and when a single header field is at fault. In the 
				latter case, the response representation SHOULD specify which header 
				field was too large.</t>

			<t>For example:</t>

				<figure><artwork xml:space="preserve"><![CDATA[
HTTP/1.1 430 Request Header Fields Too Large
Content-Type: text/html

<html>
   <head>
      <title>Request Header Fields Too Large</title>
   </head>
   <body>
      <h1>Request Header Fields Too Large</h1>
      <p>The "Example" header was too large.</p>
   </body>
</html>
]]></artwork></figure>

			<t>Responses with the 430 status code MUST NOT be stored by a
			cache.</t>
		</section>


		<section title="Security Considerations">

      <section title="428 Network Authentication Required">
	      <t>In common use, a response carrying the 428 status code will not
	      come from the origin server indicated in the request's URL. This
	      presents many security issues; e.g., an attacking intermediary may be
	      inserting cookies into the original domain's name space, may be
	      observing cookies or HTTP authentication credentials sent from the
	      user agent, and so on.</t>

	      <t>However, these risks are not unique to the 428 status code; in
	      other words, a captive portal that is not using this status code
	      introduces the same issues.</t>
			</section>

			<section title="429 Limit Exceeded">
				<t>Servers are not required to use the 429 status code; when limiting
					resource usage, it may be more appropriate to just drop connections,
					or take other steps.</t>
			</section>

			<section title="430 Request Header Fields Too Large">
				<t>Servers are not required to use the 430 status code; when under
					attack, it may be more appropriate to just drop connections, or
					take other steps.
				</t>
			</section>

		</section>

		<section title="IANA Considerations">
      <t>The HTTP Status Codes Registry should be updated with the
      following entries:</t>

			<t><list style="symbols">
			   <t>Code: 428</t>
			   <t>Description: Network Authentication Required</t>
			   <t>Specification: [ this document ]</t>
			</list></t>
			<t><list style="symbols">
			   <t>Code: 429</t>
			   <t>Description: Limit Exceeded</t>
			   <t>Specification: [ this document ]</t>
			</list></t>
			<t><list style="symbols">
			   <t>Code: 430</t>
			   <t>Description: Request Header Fields Too Large</t>
			   <t>Specification: [ this document ]</t>
			</list></t>
		</section>

	</middle>

	<back>
		<references title="Normative References">
			&rfc2119; &rfc2616;
		</references>

		<references title="Informative References">
			&rfc4918; &rfc4791;
		</references>

<!--		<section title="Acknowledgements">
			 <t>Thanks to

			  for their suggestions and feedback.
			 </t>
			<t>The authors take all responsibility for errors and
			omissions.</t>
		</section>  -->

    <section title="Issues Raised by Captive Portals" anchor="issues">
      <t>Since clients cannot differentiate between a portal's response and
      that of the HTTP server that they intended to communicate with, a
      number of issues arise.</t>

       <t>One example is the "favicon.ico" <eref
      target="http://en.wikipedia.org/wiki/Favicon"/> commonly used by
      browsers to identify the site being accessed. If the favicon for a
      given site is fetched from a captive portal instead of the intended
      site (e.g., because the user is unauthenticated), it will often
      "stick" in the browser's cache (most implementations cache favicons
      aggressively) beyond the portal session, so that it seems as if the
      portal's favicon has "taken over" the legitimate site.</t>

       <t>Another browser-based issue comes about when P3P <eref
      target="http://www.w3.org/TR/P3P/"/> is supported. Depending on how
      it is implemented, it's possible a browser might interpret a portal's
      response for the p3p.xml file as the server's, resulting in the
      privacy policy (or lack thereof) advertised by the portal being
      interpreted as applying to the intended site. Other Web-based
      protocols such as WebFinger <eref
      target="http://code.google.com/p/webfinger/wiki/WebFingerProtocol"/>,
      CORS <eref target="http://www.w3.org/TR/cors/"/> and OAuth <eref
      target="http://tools.ietf.org/html/draft-ietf-oauth-v2"/> may also be
      vulnerable to such issues.</t>

       <t>Although HTTP is most widely used with Web browsers, a growing
       number of non-browsing applications use it as a substrate protocol. For
       example, WebDAV <xref target="RFC4918"/> and CalDAV <xref
       target="RFC4791"/> both use HTTP as the basis (for network filesystem
       access and calendaring, respectively). Using these applications from
       behind a captive portal can result in spurious errors being presented
       to the user, and might result in content corruption, in extreme
       cases.</t>

       <t>Similarly, other non-browser applications using HTTP can be
      affected as well; e.g., widgets <eref
      target="http://www.w3.org/TR/widgets/"/>, software updates, and other
      specialised software such as Twitter clients and the iTunes Music
      Store.</t>

       <t>It should be noted that it's sometimes believed that using HTTP
      redirection to direct traffic to the portal addresses these issues.
      However, since many of these uses "follow" redirects, this is not a
      good solution.</t>
		</section>

	</back>
</rfc>
