<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE rfc SYSTEM "xml2rfc/rfc2629.dtd" [
   <!ENTITY rfc2119 SYSTEM 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
   <!ENTITY rfc2616 SYSTEM 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml'>
   <!ENTITY rfc4791 SYSTEM 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4791.xml'>
   <!ENTITY rfc4918 SYSTEM 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4918.xml'>
]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes" ?>
<?rfc tocdepth="1" ?>
<?rfc tocindent="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>
<?rfc compact="yes" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes" ?>

<rfc ipr="trust200902" 
     docName="draft-nottingham-http-new-status-04" 
     category="std"
     updates="2616">

	<front>
		<title>Additional HTTP Status Codes</title>
		<author initials="M." surname="Nottingham" fullname="Mark Nottingham">
			<organization>Rackspace</organization>
			<address>
				<email>mnot@mnot.net</email>
				<uri>http://www.mnot.net/</uri>
			</address>
		</author>

		<author initials="R." surname="Fielding" fullname="Roy T. Fielding">
		  <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
		  <address>
		    <postal>
		      <street>345 Park Ave</street>
		      <city>San Jose</city>
		      <region>CA</region>
		      <code>95110</code>
		      <country>USA</country>
		    </postal>
		    <email>fielding@gbiv.com</email>
		    <uri>http://roy.gbiv.com/</uri>
		  </address>
		</author>

		<date year="2012"/>
		<abstract>

			<t>This document specifies additional HyperText Transfer Protocol
         (HTTP) status codes for a variety of common situations.</t>

		</abstract>
		
		  <note title="Editorial Note (To be removed by RFC Editor before publication)">
    <t>Distribution of this document is unlimited. Although this is not a work
    item of the HTTPbis Working Group, comments should be sent to the
    Hypertext Transfer Protocol (HTTP) mailing list at <eref
    target="mailto:ietf-http-wg@w3.org">ietf-http-wg@w3.org</eref>, which may
    be joined by sending a message with subject "subscribe" to <eref
    target="mailto:ietf-http-wg-request@w3.org?subject=subscribe"
    >ietf-http-wg-request@w3.org</eref>.</t>

    <t>Discussions of the HTTPbis Working Group are archived at <eref
    target="http://lists.w3.org/Archives/Public/ietf-http-wg/"/>. </t>
  </note>

	</front>

	<middle>

		<section title="Introduction">
			<t>This document specifies additional HTTP <xref target="RFC2616"/> 
			status codes for a variety of common situations, to improve 
			interoperability and avoid confusion when other, less precise status 
			codes are used.</t>
			
			<t>Note that these status codes are optional; servers cannot be
			   required to support them. However, because clients will treat
			   unknown status codes as a generic error of the same class (e.g.,
			   499 is treated as 400 if it is not recognized), they can be
			   safely deployed by existing servers (see 
			   <xref target="RFC2616"/> Section 6.1.1 for more information).</t>
		</section>

		<section title="Requirements">
		   <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
         NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in
         this document are to be interpreted as described in <xref
         target="RFC2119"/>.</t>
		</section>


		<section title="428 Precondition Required" anchor="status-428">
      <t>The 428 status code indicates that the origin server requires the
      request to be conditional.</t>
      
      <t>Its typical use is to avoid the "lost update" problem, where a client
      GETs a resource's state, modifies it, and PUTs it back to the server,
      when meanwhile a third party has modified the state on the server,
      leading to a conflict. By requiring requests to be conditional, the
      server can assure that clients are working with the correct copies.</t>

      <t>Responses using this status code SHOULD explain how to resubmit the
      request successfully. For example:</t>

				<figure><artwork xml:space="preserve" type="message/http: msgtype=&#34;response&#34;"><![CDATA[
HTTP/1.1 428 Precondition Required
Content-Type: text/html

<html>
 <head>
  <title>Precondition Required</title>
 </head>
 <body>
  <h1>Precondition Required</h1>
   <p>This request is required to be conditional; 
      try using "If-Match".</p>
 </body>
</html>
]]></artwork></figure>

			<t>Responses with the 428 status code MUST NOT be stored by a
         cache.</t>
		</section>


		<section title="429 Too Many Requests" anchor="status-429">
			<t>The 429 status code indicates that the user has sent too many
         requests in a given amount of time ("rate limiting").</t>

			<t>The response representations SHOULD include details explaining the
         condition, and MAY include a Retry-After header indicating how long
         to wait before making a new request.</t>

			<t>For example:</t>

				<figure><artwork xml:space="preserve" type="message/http: msgtype=&#34;response&#34;"><![CDATA[
HTTP/1.1 429 Too Many Requests
Content-Type: text/html
Retry-After: 3600

<html>
   <head>
      <title>Too Many Requests</title>
   </head>
   <body>
      <h1>Too Many Requests</h1>
      <p>I only allow 50 requests per hour to this Web site per
         logged in user. Try again soon.</p>
   </body>
</html>
]]></artwork></figure>

			<t>Note that this specification does not define how the origin server
         identifies the user, nor how it counts requests. For example, an
         origin server that is limiting request rates can do so based upon
         counts of requests on a per-resource basis, across the entire server,
         or even among a set of servers. Likewise, it might identify the user
         by its authentication credentials, or a stateful cookie.</t>
			  
         <t>Responses with the 429 status code MUST NOT be stored by a
         cache.</t>
		</section>

		<section title="431 Request Header Fields Too Large" anchor="status-431">
			<t>The 431 status code indicates that the server is unwilling to
         process the request because its header fields are too large. The
         request MAY be resubmitted after reducing the size of the request
         header fields. </t>

			<t>It can be used both when the set of request header fields in total
         are too large, and when a single header field is at fault. In the
         latter case, the response representation SHOULD specify which header
         field was too large.</t>

			<t>For example:</t>

				<figure><artwork xml:space="preserve" type="message/http: msgtype=&#34;response&#34;"><![CDATA[
HTTP/1.1 431 Request Header Fields Too Large
Content-Type: text/html

<html>
   <head>
      <title>Request Header Fields Too Large</title>
   </head>
   <body>
      <h1>Request Header Fields Too Large</h1>
      <p>The "Example" header was too large.</p>
   </body>
</html>
]]></artwork></figure>

			<t>Responses with the 431 status code MUST NOT be stored by a
			cache.</t>
		</section>
		

		<section title="511 Network Authentication Required" anchor="status-511">
			<t>The 511 status code indicates that the client needs to
         authenticate to gain network access.</t>

			<t>The response representation SHOULD contain a link to a resource
         that allows the user to submit credentials (e.g. with a HTML
         form).</t>

			<t>Note that the 511 response SHOULD NOT contain a challenge or the
         login interface itself, because browsers would show the login
         interface as being associated with the originally requested URL,
         which may cause confusion.</t>

         <t>The 511 status SHOULD NOT be generated by origin servers; it is
         intended for use by intercepting proxies that are interposed as a
         means of controlling access to the network.</t>

			<t>Responses with the 511 status code MUST NOT be stored by a
         cache.</t>

         <section title="The 511 Status Code and Captive Portals"
          anchor="using-511">
            <t>The 511 status code is designed to mitigate problems caused by
            "captive portals" to software (especially non-browser agents) that
            is expecting a response from the server that a request was made
            to, not the intervening network infrastructure. It is not intended
            to encouraged deployment of captive portals, only to limit the
            damage caused by them.</t>

				<t>A network operator wishing to require some authentication,
            acceptance of terms or other user interaction before granting
            access usually does so by identifing clients who have not done so
            ("unknown clients") using their MAC addresses.</t>

				<t>Unknown clients then have all traffic blocked, except for that
            on TCP port 80, which is sent to a HTTP server (the "login
            server") dedicated to "logging in" unknown clients, and of course
            traffic to the login server itself.</t>

				<t>For example, a user agent might connect to a network and make
            the following HTTP request on TCP port 80:</t>

				<figure><artwork xml:space="preserve" type="message/http: msgtype=&#34;request&#34;"><![CDATA[
GET /index.htm HTTP/1.1
Host: www.example.com
]]></artwork></figure>

				<t>Upon receiving such a request, the login server would generate
            a 511 response:</t>

				<figure><artwork xml:space="preserve" type="message/http: msgtype=&#34;response&#34;"><![CDATA[
HTTP/1.1 511 Network Authentication Required
Content-Type: text/html

<html>
   <head>
      <title>Network Authentication Required</title>
      <meta http-equiv="refresh" 
            content="0; url=https://login.example.net/">
   </head>
   <body>
      <p>You need to <a href="https://login.example.net/">
      authenticate with the local network</a> in order to gain 
      access.</p>
   </body>
</html>
]]></artwork></figure>

				<t>Here, the 511 status code assures that non-browser clients will
            not interpret the response as being from the origin server, and
            the META HTML element redirects the user agent to the login
            server.</t>
         </section>
 		</section>


		<section title="Security Considerations" anchor="security-considerations">

			<section title="428 Precondition Required">
				<t>The 428 status code is optional; clients cannot rely upon its
            use to prevent "lost update" conflicts.</t>
			</section>

			<section title="429 Too Many Requests">
			   <t>When a server is under attack or just receiving a very large
            number of requests from a single party, responding to each with a
            429 status code will consume resources. </t>

            <t>Therefore, servers are not required to use the 429 status code;
            when limiting resource usage, it may be more appropriate to just
            drop connections, or take other steps.</t>
			</section>

			<section title="431 Request Header Fields Too Large">
				<t>Servers are not required to use the 431 status code; when under
            attack, it may be more appropriate to just drop connections, or
            take other steps. </t>
			</section>

         <section title="511 Network Authentication Required">
   	      <t>In common use, a response carrying the 511 status code will not
            come from the origin server indicated in the request's URL. This
            presents many security issues; e.g., an attacking intermediary may
            be inserting cookies into the original domain's name space, may be
            observing cookies or HTTP authentication credentials sent from the
            user agent, and so on.</t>

            <t>However, these risks are not unique to the 511 status code; in
            other words, a captive portal that is not using this status code
            introduces the same issues.</t>
	      
   	      <t>Also, note that captive portals using this status code on an
            SSL or TLS connection (commonly, port 443) will generate a
            certificate error on the client.</t>
			</section>

		</section>

		<section title="IANA Considerations">
         <t>The HTTP Status Codes Registry should be updated with the
         following entries:</t>

			<t><list style="symbols">
			   <t>Code: 428</t>
			   <t>Description: Precondition Required</t>
			   <t>Specification: [ this document ]</t>
			</list></t>
			<t><list style="symbols">
			   <t>Code: 429</t>
			   <t>Description: Too Many Requests</t>
			   <t>Specification: [ this document ]</t>
			</list></t>
			<t><list style="symbols">
			   <t>Code: 431</t>
			   <t>Description: Request Header Fields Too Large</t>
			   <t>Specification: [ this document ]</t>
			</list></t>
			<t><list style="symbols">
			   <t>Code: 511</t>
			   <t>Description: Network Authentication Required</t>
			   <t>Specification: [ this document ]</t>
			</list></t>
		</section>

	</middle>

	<back>
		<references title="Normative References">
			&rfc2119; &rfc2616;
		</references>

		<references title="Informative References">
			&rfc4918; &rfc4791;
		</references>

		<section title="Acknowledgements">
			 <t>Thanks to
              Jan Algermissen and
              Julian Reschke
			  for their suggestions and feedback.
			 </t>
		</section>

      <section title="Issues Raised by Captive Portals" anchor="issues-511">
         <t>Since clients cannot differentiate between a portal's response and
         that of the HTTP server that they intended to communicate with, a
         number of issues arise. The 511 status code is intended to help
         mitigate some of them.</t>
         
          <t>One example is the "favicon.ico" <eref
         target="http://en.wikipedia.org/wiki/Favicon"/> commonly used by
         browsers to identify the site being accessed. If the favicon for a
         given site is fetched from a captive portal instead of the intended
         site (e.g., because the user is unauthenticated), it will often
         "stick" in the browser's cache (most implementations cache favicons
         aggressively) beyond the portal session, so that it seems as if the
         portal's favicon has "taken over" the legitimate site.</t>
         
          <t>Another browser-based issue comes about when P3P <eref
         target="http://www.w3.org/TR/P3P/"/> is supported. Depending on how
         it is implemented, it's possible a browser might interpret a portal's
         response for the p3p.xml file as the server's, resulting in the
         privacy policy (or lack thereof) advertised by the portal being
         interpreted as applying to the intended site. Other Web-based
         protocols such as WebFinger <eref
         target="http://code.google.com/p/webfinger/wiki/WebFingerProtocol"/>,
         CORS <eref target="http://www.w3.org/TR/cors/"/> and OAuth <eref
         target="http://tools.ietf.org/html/draft-ietf-oauth-v2"/> may also be
         vulnerable to such issues.</t>
         
          <t>Although HTTP is most widely used with Web browsers, a growing
         number of non-browsing applications use it as a substrate protocol.
         For example, WebDAV <xref target="RFC4918"/> and CalDAV <xref
         target="RFC4791"/> both use HTTP as the basis (for remote authoring
         and calendaring, respectively). Using these applications from behind
         a captive portal can result in spurious errors being presented to the
         user, and might result in content corruption, in extreme cases.</t>
         
          <t>Similarly, other non-browser applications using HTTP can be
         affected as well; e.g., widgets <eref
         target="http://www.w3.org/TR/widgets/"/>, software updates, and other
         specialised software such as Twitter clients and the iTunes Music
         Store.</t>
         
          <t>It should be noted that it's sometimes believed that using HTTP
         redirection to direct traffic to the portal addresses these issues.
         However, since many of these uses "follow" redirects, this is not a
         good solution.</t>
      </section>
   </back>
</rfc>
